name: "Publish"

on:
  push:
    branches:
      - master
      - release/**

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  check-version:
    permissions:
      contents: read
      pull-requests: read

    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.check-version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4

      - name: Check Version
        id: check-version
        uses: shm11C3/tauri-check-release-version@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: shm11C3
          repo: HardwareVisualizer
          tauri_config_path: ./src-tauri/tauri.conf.json
          tag_name_format: v{VERSION}

  publish-tauri:
    needs: check-version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Update tauri.conf.json using Node.js script
        run: 'node .github/scripts/updateTauriConfig.cjs "echo Signing file: %1 && trusted-signing-cli -e https://eus.codesigning.azure.net/ -a hardware-monitor -c hv-certificate %1"'

      - name: Setup Azure Code Signing
        run: cargo install trusted-signing-cli

      - name: install frontend dependencies
        run: npm ci # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - if: ${{ matrix.platform == 'windows-latest' }}
        name: Bundle Offline Installer
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: npm run tauri bundle -- --config src-tauri/tauri.microsoftstore.conf.json
        shell: bash

      - if: ${{ matrix.platform == 'windows-latest' }}
        name: Rename Offline Installer
        run: |
          mkdir -p dist/offline
          cp src-tauri/target/release/bundle/msi/*.msi "dist/offline/HardwareVisualizer_${{ needs.check-version.outputs.version }}_x64_en-US_offline.msi"

      - if: ${{ matrix.platform == 'windows-latest' }}
        name: Upload MSI via gh CLI
        run: gh release upload "v${{ needs.check-version.outputs.version }}" dist/offline/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
