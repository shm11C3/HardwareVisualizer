name: "Test Auto Release Notes"

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        type: choice
        options:
          - happy_path
          - empty_commit_history
          - invalid_tag_format
          - large_commit_history

permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  test-release-notes:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup test environment
        run: |
          echo "üß™ Setting up test environment for scenario: ${{ inputs.test_scenario }}"
          
          case "${{ inputs.test_scenario }}" in
            "happy_path")
              echo "üìù Testing normal release scenario"
              # Create mock tags for testing
              git tag -a test-v1.0.0 -m "Test release v1.0.0" HEAD~5 || true
              git tag -a test-v1.1.0 -m "Test release v1.1.0" HEAD || true
              echo "PREVIOUS_TAG=test-v1.0.0" >> $GITHUB_ENV
              echo "CURRENT_TAG=test-v1.1.0" >> $GITHUB_ENV
              ;;
              
            "empty_commit_history")
              echo "üîç Testing empty commit history"
              git tag -a test-empty-v1.0.0 -m "Empty test" HEAD || true
              echo "PREVIOUS_TAG=test-empty-v1.0.0" >> $GITHUB_ENV
              echo "CURRENT_TAG=test-empty-v1.0.0" >> $GITHUB_ENV
              ;;
              
            "invalid_tag_format")
              echo "‚ùå Testing invalid tag format"
              echo "PREVIOUS_TAG=invalid-tag" >> $GITHUB_ENV
              echo "CURRENT_TAG=another-invalid" >> $GITHUB_ENV
              ;;
              
            "large_commit_history")
              echo "üìä Testing large commit history"
              git tag -a test-large-v1.0.0 -m "Large test" HEAD~50 2>/dev/null || git tag -a test-large-v1.0.0 -m "Large test" $(git rev-list --max-parents=0 HEAD)
              git tag -a test-large-v2.0.0 -m "Large test current" HEAD || true
              echo "PREVIOUS_TAG=test-large-v1.0.0" >> $GITHUB_ENV
              echo "CURRENT_TAG=test-large-v2.0.0" >> $GITHUB_ENV
              ;;
          esac

      - name: Collect commit information (Test)
        id: commits
        run: |
          echo "üìã Collecting commit information between $PREVIOUS_TAG and $CURRENT_TAG"
          
          # Get commits with error handling
          if git rev-list $PREVIOUS_TAG..$CURRENT_TAG >/dev/null 2>&1; then
            git log --format="%H|%s|%b" $PREVIOUS_TAG..$CURRENT_TAG > commits.txt || echo "No commits found" > commits.txt
          else
            echo "Invalid tag range, using last 5 commits" > commits.txt
            git log --format="%H|%s|%b" -5 >> commits.txt
          fi
          
          # Create commit info
          echo "## Commits in this test release:" > commit_info.md
          if [ -s commits.txt ]; then
            while IFS='|' read -r hash subject body; do
              echo "- **$subject** ($hash)" >> commit_info.md
            done < commits.txt
          else
            echo "- No commits found in range" >> commit_info.md
          fi
          
          COMMIT_COUNT=$(wc -l < commits.txt)
          echo "Found $COMMIT_COUNT commits"
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

      - name: Test release notes generation
        id: test-generate
        run: |
          set -euo pipefail
          
          echo "üîß Testing release notes generation..."
          
          # „Éê„É™„Éá„Éº„Ç∑„Éß„É≥Èñ¢Êï∞ („ÉÜ„Çπ„ÉàÁâà)
          validate_release_notes() {
            local file="$1"
            local errors=0
            
            echo "üîç Validating release notes: $file"
            
            if [ ! -f "$file" ]; then
              echo "‚ùå Release notes file not found"
              errors=$((errors + 1))
            fi
            
            if [ ! -s "$file" ]; then
              echo "‚ùå Release notes file is empty"
              errors=$((errors + 1))
            fi
            
            local required_sections=("What's Changed" "Installation" "System Requirements")
            for section in "${required_sections[@]}"; do
              if ! grep -q "## $section" "$file" 2>/dev/null; then
                echo "‚ùå Missing required section: $section"
                errors=$((errors + 1))
              else
                echo "‚úÖ Found required section: $section"
              fi
            done
            
            if [ $errors -eq 0 ]; then
              echo "‚úÖ Release notes validation passed"
              return 0
            else
              echo "‚ùå Release notes validation failed with $errors errors"
              return 1
            fi
          }
          
          # „ÉÜ„Çπ„ÉàÁî®„É™„É™„Éº„Çπ„Éé„Éº„ÉàÁîüÊàê
          generate_test_notes() {
            echo "üìù Generating test release notes..."
            
            # Simulate GitHub API response
            cat > RELEASE_NOTES.md << EOF
          ## What's Changed
          
          ### Test Scenario: ${{ inputs.test_scenario }}
          
          This is a test release notes generated for scenario: **${{ inputs.test_scenario }}**
          
          Commits processed: ${{ steps.commits.outputs.commit_count }}
          
          $(cat commit_info.md)
          
          ## Installation
          
          ### Windows
          - **Test Installer**: Download \`HardwareVisualizer_${CURRENT_TAG}_x64-setup.exe\`
          - **Test Portable**: Download \`HardwareVisualizer_${CURRENT_TAG}_x64_en-US.msi\`
          
          ### Linux  
          - **Test AppImage**: Download \`hardware-visualizer_${CURRENT_TAG}_amd64.AppImage\`
          - **Test Debian**: Download \`hardware-visualizer_${CURRENT_TAG}_amd64.deb\`
          
          ## System Requirements
          
          ### Windows
          - Windows 10 1903 or later (Test)
          - WebView2 Runtime
          
          ### Linux
          - Ubuntu 20.04+ (Test)
          - webkit2gtk-4.1
          
          ## Security
          
          Test binaries are digitally signed and verified.
          
          **Test Changelog**: Previous: $PREVIOUS_TAG ‚Üí Current: $CURRENT_TAG
          EOF
          }
          
          # ÂÆüË°å„Å®„ÉÜ„Çπ„Éà
          generate_test_notes
          
          if validate_release_notes "RELEASE_NOTES.md"; then
            echo "test_result=success" >> $GITHUB_OUTPUT
            NOTES_LENGTH=$(wc -l < RELEASE_NOTES.md)
            echo "notes_length=$NOTES_LENGTH" >> $GITHUB_OUTPUT
            echo "‚úÖ Test passed successfully"
          else
            echo "test_result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Test failed"
            exit 1
          fi

      - name: Display test results
        run: |
          echo "üéØ Test Results Summary"
          echo "======================="
          echo "Scenario: ${{ inputs.test_scenario }}"
          echo "Result: ${{ steps.test-generate.outputs.test_result }}"
          echo "Commits: ${{ steps.commits.outputs.commit_count }}"
          echo "Notes length: ${{ steps.test-generate.outputs.notes_length }} lines"
          echo ""
          
          if [ "${{ steps.test-generate.outputs.test_result }}" = "success" ]; then
            echo "‚úÖ All tests passed for scenario: ${{ inputs.test_scenario }}"
            echo ""
            echo "üìÑ Generated Release Notes Preview:"
            echo "=================================="
            head -20 RELEASE_NOTES.md
            echo "... (truncated)"
          else
            echo "‚ùå Tests failed for scenario: ${{ inputs.test_scenario }}"
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ inputs.test_scenario }}
          path: |
            RELEASE_NOTES.md
            commit_info.md
            commits.txt
        if: always()