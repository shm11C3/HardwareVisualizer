// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * ## プロセスリストを取得
 * 
 */
async getProcessList() : Promise<ProcessInfo[]> {
    return await TAURI_INVOKE("get_process_list");
},
/**
 * ## CPU使用率（%）を取得
 * 
 * - pram state: `tauri::State<AppState>` アプリケーションの状態
 * - return: `i32` CPU使用率（%）
 * 
 */
async getCpuUsage() : Promise<number> {
    return await TAURI_INVOKE("get_cpu_usage");
},
/**
 * ## システム情報を取得
 * 
 */
async getHardwareInfo() : Promise<Result<SysInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_hardware_info") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * ## 詳細なメモリ情報を取得
 * 
 * - return: `structs::hardware::MemoryInfo` 詳細なメモリ情報
 * 
 */
async getMemoryInfoDetail() : Promise<Result<MemoryInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_memory_info_detail") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * ## メモリ使用率（%）を取得
 * 
 * - pram state: `tauri::State<AppState>` アプリケーションの状態
 * - return: `i32` メモリ使用率（%）
 * 
 */
async getMemoryUsage() : Promise<number> {
    return await TAURI_INVOKE("get_memory_usage");
},
/**
 * ## GPU使用率（%）を取得
 * 
 * - param state: `tauri::State<AppState>` アプリケーションの状態
 * - return: `i32` GPU使用率（%）
 * 
 */
async getGpuUsage() : Promise<Result<number, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_gpu_usage") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getProcessorsUsage() : Promise<number[]> {
    return await TAURI_INVOKE("get_processors_usage");
},
/**
 * ## GPU温度を取得
 * 
 */
async getGpuTemperature() : Promise<Result<NameValue[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_gpu_temperature") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * ## GPUのファン回転数を取得
 * 
 */
async getNvidiaGpuCooler() : Promise<Result<NameValue[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_nvidia_gpu_cooler") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * ## CPU使用率の履歴を取得
 * 
 * - param state: `tauri::State<AppState>` アプリケーションの状態
 * - param seconds: `u32` 取得する秒数
 * 
 */
async getCpuUsageHistory(seconds: number) : Promise<number[]> {
    return await TAURI_INVOKE("get_cpu_usage_history", { seconds });
},
/**
 * ## メモリ使用率の履歴を取得
 * 
 * - param state: `tauri::State<AppState>` アプリケーションの状態
 * - param seconds: `u32` 取得する秒数
 * 
 */
async getMemoryUsageHistory(seconds: number) : Promise<number[]> {
    return await TAURI_INVOKE("get_memory_usage_history", { seconds });
},
/**
 * ## GPU使用率の履歴を取得
 * 
 * - param state: `tauri::State<AppState>` アプリケーションの状態
 * - param seconds: `u32` 取得する秒数
 * 
 */
async getGpuUsageHistory(seconds: number) : Promise<number[]> {
    return await TAURI_INVOKE("get_gpu_usage_history", { seconds });
},
/**
 * ## ネットワーク情報を取得
 * 
 */
async getNetworkInfo() : Promise<Result<NetworkInfo[], BackendError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_network_info") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSettings() : Promise<Result<ClientSettings, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_settings") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLanguage(newLanguage: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_language", { newLanguage }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setTheme(newTheme: Theme) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_theme", { newTheme }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setDisplayTargets(newTargets: HardwareType[]) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_display_targets", { newTargets }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setGraphSize(newSize: GraphSize) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_graph_size", { newSize }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphType(newType: LineGraphType) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_type", { newType }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphBorder(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_border", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphFill(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_fill", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphColor(target: HardwareType, newColor: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_color", { target, newColor }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphMix(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_mix", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphShowLegend(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_show_legend", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphShowScale(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_show_scale", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setLineGraphShowTooltip(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_line_graph_show_tooltip", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setBackgroundImgOpacity(newValue: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_background_img_opacity", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setSelectedBackgroundImg(fileId: string | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_selected_background_img", { fileId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setTemperatureUnit(newUnit: TemperatureUnit) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_temperature_unit", { newUnit }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setHardwareArchiveEnabled(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_hardware_archive_enabled", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setHardwareArchiveInterval(newInterval: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_hardware_archive_interval", { newInterval }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setHardwareArchiveScheduledDataDeletion(newValue: boolean) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_hardware_archive_scheduled_data_deletion", { newValue }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readLicenseFile() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_license_file") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readThirdPartyNoticesFile() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_third_party_notices_file") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openLicenseFilePath() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_license_file_path") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * 背景画像を取得
 * 
 * - `file_id`: 画像ファイルID
 * 
 */
async getBackgroundImage(fileId: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_background_image", { fileId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * BG_IMG_DIR_NAME ディレクトリ内の背景画像一覧を取得
 * 
 */
async getBackgroundImages() : Promise<Result<BackgroundImage[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_background_images") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * 背景画像を保存
 * 
 * - `image_data`: 画像データのBase64文字列
 * - returns: `file_id`
 * 
 * ### TODO
 * - JsImage https://docs.rs/tauri/2.1.1/tauri/image/enum.JsImage.html を使用する
 * - specta での型定義が難しかったため一旦 Base64 で実装
 * 
 * 
 */
async saveBackgroundImage(imageData: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_background_image", { imageData }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * 背景画像を削除
 * - `file_id`: 画像ファイルID
 * 
 */
async deleteBackgroundImage(fileId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_background_image", { fileId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setDecoration(isDecorated: boolean) : Promise<void> {
    await TAURI_INVOKE("set_decoration", { isDecorated });
},
async restartApp() : Promise<void> {
    await TAURI_INVOKE("restart_app");
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BackendError = "cpuInfoNotAvailable" | "storageInfoNotAvailable" | "memoryInfoNotAvailable" | "graphicInfoNotAvailable" | "networkInfoNotAvailable" | "networkUsageNotAvailable" | "unexpectedError"
/**
 * - `file_id` : 画像ファイルID
 * - `image_data` : 画像データのBase64文字列
 * 
 */
export type BackgroundImage = { fileId: string; imageData: string }
export type ClientSettings = { version: string; language: string; theme: Theme; displayTargets: HardwareType[]; graphSize: GraphSize; lineGraphType: LineGraphType; lineGraphBorder: boolean; lineGraphFill: boolean; lineGraphColor: LineGraphColorStringSettings; lineGraphMix: boolean; lineGraphShowLegend: boolean; lineGraphShowScale: boolean; lineGraphShowTooltip: boolean; backgroundImgOpacity: number; selectedBackgroundImg: string | null; temperatureUnit: TemperatureUnit; hardwareArchive: HardwareArchiveSettings }
export type CpuInfo = { name: string; vendor: string; coreCount: number; clock: number; clockUnit: string; cpuName: string }
export type DiskKind = "hdd" | "ssd" | "other"
export type GraphSize = "sm" | "md" | "lg" | "xl" | "2xl"
export type GraphicInfo = { id: string; name: string; vendorName: string; clock: number; memorySize: string; memorySizeDedicated: string }
export type HardwareArchiveSettings = { enabled: boolean; scheduledDataDeletion: boolean; refreshIntervalDays: number }
export type HardwareType = "cpu" | "memory" | "gpu"
/**
 * クライアントに送信する設定の構造体
 * 
 */
export type LineGraphColorStringSettings = { cpu: string; memory: string; gpu: string }
export type LineGraphType = "default" | "step" | "linear" | "basis"
export type MemoryInfo = { size: string; clock: number; clockUnit: string; memoryCount: number; totalSlots: number; memoryType: string; isDetailed: boolean }
export type NameValue = { name: string; value: number }
export type NetworkInfo = { description: string | null; macAddress: string | null; ipv4: string[]; ipv6: string[]; linkLocalIpv6: string[]; ipSubnet: string[]; defaultIpv4Gateway: string[]; defaultIpv6Gateway: string[] }
export type ProcessInfo = { pid: number; name: string; cpuUsage: number; memoryUsage: number }
export type SizeUnit = "B" | "KB" | "MB" | "GB"
export type StorageInfo = { name: string; size: number; sizeUnit: SizeUnit; free: number; freeUnit: SizeUnit; storageType: DiskKind; fileSystem: string }
export type SysInfo = { cpu: CpuInfo | null; memory: MemoryInfo | null; gpus: GraphicInfo[] | null; storage: StorageInfo[] }
export type TemperatureUnit = "C" | "F"
export type Theme = "light" | "dark" | "ocean" | "grove" | "sunset" | "nebula" | "orbit" | "cappuccino" | "espresso"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
